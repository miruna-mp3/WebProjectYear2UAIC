DROP TABLE IF EXISTS friends CASCADE;
DROP TABLE IF EXISTS profiles CASCADE;
DROP TABLE IF EXISTS queries CASCADE;
DROP TABLE IF EXISTS users CASCADE;

CREATE TABLE users
(
    id bigInt GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username character varying(30) NOT NULL,
    password character varying(255) NOT NULL,
    email character varying(40) NOT NULL,
    CONSTRAINT unique_username UNIQUE (username)
);

CREATE TABLE queries
(
    "ownerId" bigint NOT NULL,
    id bigInt GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "jsonData" jsonb NOT NULL,
    name character varying(255),
    CONSTRAINT fk_ownerId FOREIGN KEY ("ownerId") REFERENCES users(id)
);


CREATE TABLE profiles
(
    id bigInt GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "ownerId" bigint NOT NULL,
    "firstName" character varying(30),
    "lastName" character varying(40),
    "phoneNumber" character varying(12),
    address character varying(40),
    country character varying(20),
    city character varying(20),
    CONSTRAINT fk_ownerId FOREIGN KEY ("ownerId") REFERENCES users(id)
);


CREATE TABLE friends
(
    id bigInt GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id1 bigint NOT NULL,
    id2 bigint NOT NULL,
    CONSTRAINT fk_friend1 FOREIGN KEY (id1) REFERENCES users(id),
    CONSTRAINT fk_friend2 FOREIGN KEY (id2) REFERENCES users(id)
);


CREATE OR REPLACE FUNCTION default_query_name()
RETURNS TRIGGER AS $$
BEGIN
     UPDATE queries SET name = 'Default';
     RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_save_query
    AFTER INSERT ON public.queries
    FOR EACH ROW
    EXECUTE FUNCTION default_query_name();

CREATE OR REPLACE FUNCTION create_profile_on_user_insert()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO profiles ("ownerId") VALUES (NEW.id);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_create_profile
    AFTER INSERT ON users
    FOR EACH ROW
    EXECUTE FUNCTION create_profile_on_user_insert();

CREATE VIEW user_query_stats AS
SELECT u.id, u.username, COUNT(q.id) as query_count
FROM users u
LEFT JOIN queries q ON u.id = q."ownerId"
GROUP BY u.id, u.username;

ALTER TABLE profiles ENABLE TRIGGER ALL;
ALTER TABLE queries ENABLE TRIGGER ALL;


